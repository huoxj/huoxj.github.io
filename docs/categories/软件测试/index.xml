<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>软件测试 on Runz&#39;s blog</title>
    <link>https://huoxj.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 软件测试 on Runz&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>huoxj_runz@gmail.com (Runz Liu)</managingEditor>
    <webMaster>huoxj_runz@gmail.com (Runz Liu)</webMaster>
    <copyright>@ 2025 Runz Liu</copyright>
    <lastBuildDate>Fri, 03 Jan 2025 20:08:03 -0800</lastBuildDate><atom:link href="https://huoxj.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>08-移动应用众包测试</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/08-%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E4%BC%97%E5%8C%85%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 03 Jan 2025 20:08:03 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/08-%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E4%BC%97%E5%8C%85%E6%B5%8B%E8%AF%95/</guid>
      <description>跳过了 07-Web 测试，因为不考。 众包：利用群体力量来完成传统方法中成本高昂或耗时的大规模任务 ：利用群体力量完成移动应用测试任务 Aggregator：将报告做聚类。 Summarizer：一&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>06-移动应用自动化 GUI 测试</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/06-%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96-gui-%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 03 Jan 2025 19:53:30 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/06-%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96-gui-%E6%B5%8B%E8%AF%95/</guid>
      <description>传统的脚本驱动的自动化 GUI 测试。代表工具是 &lt;code&gt;selenium&lt;/code&gt; 和 &lt;code&gt;appium&lt;/code&gt; 即便是基于简单的图像匹配，还是存在依赖、适配、成本的问题。 挑战⭐： 解决⭐：基于图像理解技术，录制和回放&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>05-测试预言问题</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/05-%E6%B5%8B%E8%AF%95%E9%A2%84%E8%A8%80%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 03 Jan 2025 19:38:32 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/05-%E6%B5%8B%E8%AF%95%E9%A2%84%E8%A8%80%E9%97%AE%E9%A2%98/</guid>
      <description>测试预言，是一个描述输出与预期是否相符的概念。 预言有啥问题了？。 解决方案，有一种叫使用不完全/有偏测试预言。也看不懂什么意思，反正就是来引出下面的蜕变测试和差分测试的。 充分利用成功测试用例。对成&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>03-模糊测试</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/03-%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 03 Jan 2025 17:18:31 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/03-%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>04-测试用例优先级</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/04-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Fri, 03 Jan 2025 15:55:19 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/04-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>测试用例优先级是解决回归测试的一些问题的。 ：版本迭代之后，重新运行之前的测试用例 但是，之前的测试用例： 要优化回归测试，就要优化测试用例集合。有如下方法 1. 修复 2. 选择⭐ 3. 扩充 4&amp;hellip;.</description>
      
    </item>
    
    <item>
      <title>02-变异测试</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/02-%E5%8F%98%E5%BC%82%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 03 Jan 2025 14:26:30 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/02-%E5%8F%98%E5%BC%82%E6%B5%8B%E8%AF%95/</guid>
      <description>一言以蔽之，变异测试研究如何编写能够的测试用例，以及如何提升测试。 将这些测试用例应用到待测程序中，就很有可能会发现待测程序的缺陷。 基于一定的语法（Syntax）变换规则，通过对源程序进行程序变换（&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>01-软件测试导览</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/01-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AF%BC%E8%A7%88/</link>
      <pubDate>Fri, 03 Jan 2025 14:14:48 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/01-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AF%BC%E8%A7%88/</guid>
      <description>三个部分，&lt;code&gt;经典测试&lt;/code&gt;、&lt;code&gt;移动应用测试&lt;/code&gt;和&lt;code&gt;AI测试&lt;/code&gt; PIE 模型解释了软件中的 Fault 如何导致 Failure。 测试，并且测试，总有概率低的。</description>
      
    </item>
    
  </channel>
</rss>
