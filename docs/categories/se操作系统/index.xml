<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SE操作系统 on Runz&#39;s Blog</title>
    <link>http://localhost:4647/categories/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in SE操作系统 on Runz&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2024 09:53:23 -0800</lastBuildDate>
    <atom:link href="http://localhost:4647/categories/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ex6 信号量与PV操作习题</title>
      <link>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ex6-%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B8%8Epv%E6%93%8D%E4%BD%9C%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Fri, 24 May 2024 09:53:23 -0800</pubDate>
      <guid>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ex6-%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B8%8Epv%E6%93%8D%E4%BD%9C%E4%B9%A0%E9%A2%98/</guid>
      <description>rmutex的理解 : waiting customers</description>
    </item>
    <item>
      <title>Lab3</title>
      <link>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/</link>
      <pubDate>Wed, 22 May 2024 08:20:13 -0800</pubDate>
      <guid>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/</guid>
      <description>中断向量是确定中断服务程序的位置。包含段基址和偏移量。 把每个中断服务程序进行编号，一个号代表一个中断服务程序，就是中断类型码，是计算机用来查找中断向量用的。(0-255) 一片专门用来存放所有的中断&amp;hellip;</description>
    </item>
    <item>
      <title>C5 文件管理</title>
      <link>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c5-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 16 May 2024 20:45:32 -0800</pubDate>
      <guid>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c5-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
      <description>卷：介质的物理单位 块：主存储器和辅助存储器进行信息交换的物理单位，也叫 文件中的数据是一串没有结构的字符流，比如一串字符串组成的文件 若干逻辑记录信息所组成的记录流文件。是逻辑上的一坨信息的单位 这&amp;hellip;</description>
    </item>
    <item>
      <title>C4 设备管理</title>
      <link>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c4-%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 07 May 2024 20:09:42 -0800</pubDate>
      <guid>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c4-%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;解决设备和CPU的不匹配，使两者充分工作 2. 设备的具体操作细节，配置驱动程序，提供 ：改善设备效率，尤其是磁盘 ：用统一标准来管理所有设备 从低到高为 位于OS底层，和设备联系紧密 数据传输&amp;hellip;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
    </item>
    <item>
      <title>C3 存储管理</title>
      <link>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c3-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 25 Apr 2024 09:54:02 -0800</pubDate>
      <guid>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c3-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</guid>
      <description>| 0 | 4k | 12k | 28k | 44k | 92k | &amp;hellip; | | &amp;mdash;&amp;mdash;- | OS区(4k) | 分区1(8k) | 分区2(16k) | 分区3(16k) | 分区4(2&amp;hellip;</description>
    </item>
    <item>
      <title>C2 处理器管理</title>
      <link>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c2-%E5%A4%84%E7%90%86%E5%99%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 22 Apr 2024 14:50:20 -0800</pubDate>
      <guid>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c2-%E5%A4%84%E7%90%86%E5%99%A8%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;第二章-处理器管理&#34;&gt;第二章-处理器管理&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本章结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271717642.png&#34; alt=&#34;image-20240422145053555&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;21-处理器&#34;&gt;2.1-处理器&lt;/h2&gt;&#xA;&lt;h3 id=&#34;特权指令&#34;&gt;特权指令&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;特权指令：只能被操作系统内核使用的指令&lt;/li&gt;&#xA;&lt;li&gt;比如启动IO指令、置PC指令等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;处理器模式&#34;&gt;处理器模式&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0=OS内核；1=系统调用；2=共享库程序；3=用户程序&lt;/li&gt;&#xA;&lt;li&gt;现代操作系统：内核模式(特权指令ok)，用户模式(非特权指令)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;22-中断&#34;&gt;2.2-中断&lt;/h2&gt;&#xA;&lt;h3 id=&#34;中断概念&#34;&gt;中断概念&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;广义中断&lt;/strong&gt;：程序执行过程中，遇到急需处理的事件时，暂时中止当前程序的运行，转去执行相应的事件处理程序。等中断处理完成后再返回原程序中断的地方或调度其他程序执行的过程叫中断。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;狭义中断&lt;/strong&gt;：事件来源于处理器外的广义中断。如IO中断、时钟中断、外部信号中断&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;广义中断 minus 狭义中断&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;异常：事件来源于处理器运行指令引起的广义中断。如地址异常、算术异常、处理器硬件故障&lt;/li&gt;&#xA;&lt;li&gt;系统异常：执行陷入(trap)指令而触发系统调用引起的终端事件。如请求设备、请求IO、创建进程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;中断驱动下的进程状态机&#34;&gt;中断驱动下的进程状态机&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271717238.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;中断源&#34;&gt;中断源&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;处理器硬件故障中断&lt;/li&gt;&#xA;&lt;li&gt;程序性中断&lt;/li&gt;&#xA;&lt;li&gt;自愿性中断-系统调用&lt;/li&gt;&#xA;&lt;li&gt;IO中断&lt;/li&gt;&#xA;&lt;li&gt;外部中断&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;23-进程&#34;&gt;2.3-进程&lt;/h2&gt;&#xA;&lt;h3 id=&#34;进程的概念&#34;&gt;⭐⭐⭐进程的概念&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程是一个具有一定独立功能的&lt;strong&gt;程序&lt;/strong&gt;关于某个&lt;strong&gt;数据集合&lt;/strong&gt;的一次运行活动&lt;/li&gt;&#xA;&lt;li&gt;进程是操作系统进行&lt;strong&gt;资源分配&lt;/strong&gt;和&lt;strong&gt;调度&lt;/strong&gt;的一个独立单位&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于多线程系统来说，进程是&lt;strong&gt;资源分配&lt;/strong&gt;的独立单位&lt;/li&gt;&#xA;&lt;li&gt;线程是资源调度的独立单位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;进程的形式化定义&#34;&gt;进程的形式化定义&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271718917.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;进程的三态模型&#34;&gt;⭐⭐⭐&lt;strong&gt;进程的三态模型&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271718439.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;运行态&lt;/strong&gt;指进程占有处理器运行&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;就绪态&lt;/strong&gt;指进程具备运行条件等待处理器运行&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;等待态&lt;/strong&gt;指进程由于等待资源、输入输出、信号等而不具备运行条件&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;进程挂起&#34;&gt;进程挂起&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271719195.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机资源不足，会剥夺某些进程的资源，调入OS管理的堆换区。这些进程就被挂起了。&lt;/li&gt;&#xA;&lt;li&gt;挂起的进程&lt;strong&gt;不参加进程调度&lt;/strong&gt;。在适当的时候被调回内存。&lt;/li&gt;&#xA;&lt;li&gt;挂起和非运行态的本质区别是有没有&lt;strong&gt;占用系统资源&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271719451.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;进程控制块-pcb&#34;&gt;⭐⭐⭐进程控制块 PCB&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;OS用于记录和刻画进程状态及环境信息的数据结构。说白了就是面向OS的&lt;strong&gt;进程的花名册&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;包含&lt;strong&gt;标识信息&lt;/strong&gt;、&lt;strong&gt;现场信息&lt;/strong&gt;、&lt;strong&gt;控制信息&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;进程映像-process-image&#34;&gt;⭐⭐⭐进程映像 Process Image&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程的&lt;strong&gt;内存级&lt;/strong&gt;实体&lt;/li&gt;&#xA;&lt;li&gt;包括：PCB、进程程序空间、进程数据空间、核心栈&#xA;&lt;ul&gt;&#xA;&lt;li&gt;核心栈就是在内核态执行指令时用的栈&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;进程上下文-process-context&#34;&gt;进程上下文 Process Context&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程执行所需要的环境信息&lt;/li&gt;&#xA;&lt;li&gt;包括：用户级上下文、寄存器上下文、系统级上下文&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;原语-primitive&#34;&gt;原语 Primitive&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若干条指令构成的程序，执行上具有原子性。意思是原语不可能被中断。&lt;/li&gt;&#xA;&lt;li&gt;用于执行一些涉及修改OS核心数据结构的操作。为了防止并发和中断等时间上的错误，原语必须整块执行。&lt;/li&gt;&#xA;&lt;li&gt;常用原语：进程控制原语、进程通信原语&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;24-多线程技术&#34;&gt;2.4-多线程技术&lt;/h2&gt;&#xA;&lt;h3 id=&#34;为什么要多线程&#34;&gt;为什么要多线程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单线程能一定程度上实现并发了，但我们还想更进一步。&lt;/li&gt;&#xA;&lt;li&gt;限制单线程并发程度的要素：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程切换开销大。想切换执行路径就必须换进程，开销很大。&lt;/li&gt;&#xA;&lt;li&gt;进程通信开销大。进程通信要陷入系统调用，涉及模式转换，开销大。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;解决：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分离&lt;strong&gt;资源分配&lt;/strong&gt;和&lt;strong&gt;调度&lt;/strong&gt;。因为资源分配比较静态，不会很频繁。相对而言，(如果想更加并发的话)调度比资源分配频繁多了。&lt;/li&gt;&#xA;&lt;li&gt;两者分离的结果就是&lt;strong&gt;进程&lt;/strong&gt;和&lt;strong&gt;线程&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;进程和线程&#34;&gt;进程和线程&lt;/h3&gt;&#xA;&lt;h4 id=&#34;进程&#34;&gt;进程&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;操作系统的视角：是OS进行保护和&lt;strong&gt;资源分配&lt;/strong&gt;的独立单位。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C1 计算机操作系统概述</title>
      <link>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 22 Apr 2024 14:17:37 -0800</pubDate>
      <guid>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h1 id=&#34;第一章-计算机操作系统概述&#34;&gt;第一章-计算机操作系统概述&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本章结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271717415.png&#34; alt=&#34;image-20240422141854716&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;122-操作系统及其分类&#34;&gt;1.2.2-操作系统及其分类&lt;/h2&gt;&#xA;&lt;h3 id=&#34;理论&#34;&gt;理论&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;OS的&lt;strong&gt;概念&lt;/strong&gt;：OS是计算机系统最基础的系统软件，管理软硬件资源、控制程序执行、改善人机界面、合理组织计算机工作流程，为用户使用计算机提供良好运行环境&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;OS的&lt;strong&gt;组成&lt;/strong&gt;：进程调度、进程通信、内存管理、设备管理、文件管理、网络通信、作业控制&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;OS的&lt;strong&gt;类型&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多道批处理系统（脱机）&lt;/li&gt;&#xA;&lt;li&gt;分时操作系统&lt;/li&gt;&#xA;&lt;li&gt;实时操作系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;135-程序接口的视角&#34;&gt;1.3.5-程序接口的视角&lt;/h2&gt;&#xA;&lt;h3 id=&#34;系统调用&#34;&gt;系统调用&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409272308402.png&#34; alt=&#34;image-20240927230851266&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现的基础是陷阱机制：从用户态陷入内核态&lt;/li&gt;&#xA;&lt;li&gt;调用系统调用时(int **h)，操作系统从用户态转入内核态执行系统调用&lt;/li&gt;&#xA;&lt;li&gt;系统调用返回时转入用户态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;136-系统结构的视角&#34;&gt;1.3.6-系统结构的视角&lt;/h2&gt;&#xA;&lt;h3 id=&#34;操作系统内核设计&#34;&gt;操作系统内核设计&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设计概念：模块化、层次化、虚拟化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;内核设计分类&#34;&gt;内核设计分类&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单内核&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在一大坨代码中实际包含了所有操作系统功能，并作为一个单一进程运行，具有唯一地址空间。&lt;/li&gt;&#xA;&lt;li&gt;大部分UNIX(包括Linxu)系统都采用的单体内核。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;微内核&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;blog.csdn.net/silentpebble/article/details/7941025&#34;&gt;大部分OS功能作为单独的进程在内核态外运行，他们通过消息传递进行通讯&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;内核态只有最基本、最核心的功能模块。比如IPC、虚存、调度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;混合内核&lt;/li&gt;&#xA;&lt;li&gt;外内核&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OS本身值提供很低级的硬件操作，没有很完整的硬件抽象。&lt;/li&gt;&#xA;&lt;li&gt;用在嵌入式上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>C0 绪论</title>
      <link>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c0-%E7%BB%AA%E8%AE%BA/</link>
      <pubDate>Mon, 22 Apr 2024 14:07:17 -0800</pubDate>
      <guid>http://localhost:4647/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c0-%E7%BB%AA%E8%AE%BA/</guid>
      <description>&lt;h1 id=&#34;lec-0-绪论&#34;&gt;Lec-0 绪论&lt;/h1&gt;&#xA;&lt;h2 id=&#34;观察os的视角&#34;&gt;观察OS的视角&lt;/h2&gt;&#xA;&lt;h3 id=&#34;用户角度&#34;&gt;用户角度&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OS是&lt;strong&gt;服务提供者&lt;/strong&gt; - 接口和服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;系统角度&#34;&gt;系统角度&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OS是&lt;strong&gt;资源管理者&lt;/strong&gt; - 处理器管理、存储管理、设备管理、文件管理&lt;/li&gt;&#xA;&lt;li&gt;OS是&lt;strong&gt;虚拟机&lt;/strong&gt; - 虚拟机、os结构、os运行模型、网络环境下的操作系统&lt;/li&gt;&#xA;&lt;li&gt;OS是&lt;strong&gt;程序执行的控制者&lt;/strong&gt; - 进程交互、调度、同步、通信、死锁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;最基础的抽象&#34;&gt;最基础的抽象🤓☝️&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程抽象-是对已进入主存正在运行的程序在处理器上操作的状态集的抽象 。&lt;/li&gt;&#xA;&lt;li&gt;虚存抽象-是对物理主存的抽象，进程可获得一个硕大的连续地址空间来存放可执行程序和数据，可使用虚拟地址来引用物理主存单元。&lt;/li&gt;&#xA;&lt;li&gt;文件抽象-是对设备(磁盘)的抽象 。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;复习roadmap&#34;&gt;复习Roadmap&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271716735.png&#34; alt=&#34;image-20240422141419166&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
