<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Runz&#39;s blog</title>
    <link>https://huoxj.github.io/</link>
    <description>Recent content on Runz&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>huoxj_runz@gmail.com (Runz Liu)</managingEditor>
    <webMaster>huoxj_runz@gmail.com (Runz Liu)</webMaster>
    <copyright>@ 2025 Runz Liu</copyright>
    <lastBuildDate>Wed, 01 Jan 2025 15:47:27 -0800</lastBuildDate><atom:link href="https://huoxj.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>异常处理</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 29 Dec 2024 08:41:10 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>传统的方法是，使用或者来标识是否发生异常、发生什么异常。 函数检查参数或者返回值来确定异常，并。 这样需要逐层返回。并且对于一些特殊的情况无法处理，比如构造函数发生异常。 &amp;mdash; 语句序列中是否发生异&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Lec-8 交互式系统的需求</title>
      <link>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-8-%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%9C%80%E6%B1%82/</link>
      <pubDate>Fri, 27 Dec 2024 10:28:24 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-8-%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%9C%80%E6%B1%82/</guid>
      <description>心理学原理部分，假设每个人都有相似的能力和局限性。 交互产品设计人员应该意识到个性的差异。 用户的主要体现在： 特点 设计要求 特点 设计要求 特点 设计要求 老年人和儿童 使用人物角色 (Perso&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>C&#43;&#43; 强制类型转换</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/c&#43;&#43;-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Tue, 24 Dec 2024 15:03:25 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/c&#43;&#43;-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>C 中的强制类型转换是通过在表达式前面加类型名实现的。 C+，强制类型转换被细分成了四个运算符： 原因如下： 比如，int 转成 double 是风险不大的；但是将 const 指针转换成非 cons&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>C&#43;&#43;期末复习</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/c&#43;&#43;%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Tue, 24 Dec 2024 14:21:51 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/c&#43;&#43;%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</guid>
      <description>根据上课 PPT 和同学与学长的笔记整理而成。 先跳过。。。 {{}} 副作用，就是一个过程是否会修改参与的变量的性质。 在表达式中，有副作用的运算符：&lt;code&gt;=&lt;/code&gt; &lt;code&gt;+=&lt;/code&gt; &lt;code&gt;++&lt;/code&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 等等 无副&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Lec-7 评估技术-用户测试</title>
      <link>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-7-%E8%AF%84%E4%BC%B0%E6%8A%80%E6%9C%AF-%E7%94%A8%E6%88%B7%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 22 Dec 2024 16:13:20 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-7-%E8%AF%84%E4%BC%B0%E6%8A%80%E6%9C%AF-%E7%94%A8%E6%88%B7%E6%B5%8B%E8%AF%95/</guid>
      <description>用户测试主要是指在测量典型用户的情况，目标是获取的性能数据来评价系统的可用性，适合对原型和现有系统进行评估。 1. 决定评估需要完成的总体目标 2. 发掘需要回答的具体问题 3. 选择用于回答具体问题&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Lec-6 评估技术-询问用户与专家</title>
      <link>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-6-%E8%AF%84%E4%BC%B0%E6%8A%80%E6%9C%AF-%E8%AF%A2%E9%97%AE%E7%94%A8%E6%88%B7%E4%B8%8E%E4%B8%93%E5%AE%B6/</link>
      <pubDate>Sun, 22 Dec 2024 15:44:12 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-6-%E8%AF%84%E4%BC%B0%E6%8A%80%E6%9C%AF-%E8%AF%A2%E9%97%AE%E7%94%A8%E6%88%B7%E4%B8%8E%E4%B8%93%E5%AE%B6/</guid>
      <description>有目的的对话过程。 问卷调查是用于搜集统计数据和用户意见的常用方法。 QUIS: questionnaire for user interaction satisfaction 内容： 有助于提高回复&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Lec-5 评估技术-观察用户</title>
      <link>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-5-%E8%AF%84%E4%BC%B0%E6%8A%80%E6%9C%AF-%E8%A7%82%E5%AF%9F%E7%94%A8%E6%88%B7/</link>
      <pubDate>Sun, 22 Dec 2024 14:22:33 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-5-%E8%AF%84%E4%BC%B0%E6%8A%80%E6%9C%AF-%E8%A7%82%E5%AF%9F%E7%94%A8%E6%88%B7/</guid>
      <description>

&lt;h2 class=&#34;relative group&#34;&gt;观察方式 二者差别不大（？）。两者经常互为补充、互相参考。 &amp;mdash; 以下是具体的观察方法。 在专门为可用性测试而安装配置的固定设备的环境下进行的观察。 测试区、观察区 二者分开，防止互相干扰。 &amp;hellip; 
    &lt;div id=&#34;%E8%A7%82%E5%AF%9F%E6%96%B9%E5%BC%8F-%E4%BA%8C%E8%80%85%E5%B7%AE%E5%88%AB%E4%B8%8D%E5%A4%A7%E4%B8%A4%E8%80%85%E7%BB%8F%E5%B8%B8%E4%BA%92%E4%B8%BA%E8%A1%A5%E5%85%85%E4%BA%92%E7%9B%B8%E5%8F%82%E8%80%83-----%E4%BB%A5%E4%B8%8B%E6%98%AF%E5%85%B7%E4%BD%93%E7%9A%84%E8%A7%82%E5%AF%9F%E6%96%B9%E6%B3%95-%E5%9C%A8%E4%B8%93%E9%97%A8%E4%B8%BA%E5%8F%AF%E7%94%A8%E6%80%A7%E6%B5%8B%E8%AF%95%E8%80%8C%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%9A%84%E5%9B%BA%E5%AE%9A%E8%AE%BE%E5%A4%87%E7%9A%84%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%A7%82%E5%AF%9F-%E6%B5%8B%E8%AF%95%E5%8C%BA%E8%A7%82%E5%AF%9F%E5%8C%BA-%E4%BA%8C%E8%80%85%E5%88%86%E5%BC%80%E9%98%B2%E6%AD%A2%E4%BA%92%E7%9B%B8%E5%B9%B2%E6%89%B0-&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%E8%A7%82%E5%AF%9F%E6%96%B9%E5%BC%8F-%E4%BA%8C%E8%80%85%E5%B7%AE%E5%88%AB%E4%B8%8D%E5%A4%A7%E4%B8%A4%E8%80%85%E7%BB%8F%E5%B8%B8%E4%BA%92%E4%B8%BA%E8%A1%A5%E5%85%85%E4%BA%92%E7%9B%B8%E5%8F%82%E8%80%83-----%E4%BB%A5%E4%B8%8B%E6%98%AF%E5%85%B7%E4%BD%93%E7%9A%84%E8%A7%82%E5%AF%9F%E6%96%B9%E6%B3%95-%E5%9C%A8%E4%B8%93%E9%97%A8%E4%B8%BA%E5%8F%AF%E7%94%A8%E6%80%A7%E6%B5%8B%E8%AF%95%E8%80%8C%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%9A%84%E5%9B%BA%E5%AE%9A%E8%AE%BE%E5%A4%87%E7%9A%84%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%A7%82%E5%AF%9F-%E6%B5%8B%E8%AF%95%E5%8C%BA%E8%A7%82%E5%AF%9F%E5%8C%BA-%E4%BA%8C%E8%80%85%E5%88%86%E5%BC%80%E9%98%B2%E6%AD%A2%E4%BA%92%E7%9B%B8%E5%B9%B2%E6%89%B0-&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
</description>
      
    </item>
    
    <item>
      <title>三剑客</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E4%B8%89%E5%89%91%E5%AE%A2/</link>
      <pubDate>Sat, 21 Dec 2024 15:02:27 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E4%B8%89%E5%89%91%E5%AE%A2/</guid>
      <description>std::optional std::tuple std::any</description>
      
    </item>
    
    <item>
      <title>流</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E6%B5%81/</link>
      <pubDate>Thu, 12 Dec 2024 16:03:02 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E6%B5%81/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>锁与条件变量</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E9%94%81%E4%B8%8E%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 11 Dec 2024 21:40:53 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E9%94%81%E4%B8%8E%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>运算符重载</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Thu, 05 Dec 2024 15:09:54 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</guid>
      <description>大部分运算符都可重载： | 双目算术运算符 | 加)，-(减)，*(乘)，/(除)，% (取模) | | &amp;mdash;&amp;mdash; | 关系运算符 | ==(等于)，!= (不等于)， (大于)，=(大于等于) &amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Pytorch DataLoader 加速</title>
      <link>https://huoxj.github.io/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/pytorch-dataloader-%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Mon, 02 Dec 2024 20:29:40 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/pytorch-dataloader-%E5%8A%A0%E9%80%9F/</guid>
      <description>在训练机器学习作业的 ResNet 网络时，发现每一个 epoch 之前都会卡上十几二十秒才开始 模型真正的训练。具体表现如下： 一句话概括，是每个 epoch 前占用了绝大部分时间。 看下面两张图，&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Python 虚拟环境</title>
      <link>https://huoxj.github.io/posts/python/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 28 Nov 2024 14:30:20 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/python/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>对于 Python 来说，环境管理有着十分甚至九分的作用。本文列出一些常用的虚拟环境管理方式，以供参考。 最常用的虚拟环境管理器。 Python 自带的虚拟环境管理器。 &lt;code&gt;ctrl hift &lt;/code&gt; 呼出&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Lec-4 评估的基础知识</title>
      <link>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-4-%E8%AF%84%E4%BC%B0%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 25 Nov 2024 14:28:54 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-4-%E8%AF%84%E4%BC%B0%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&amp;mdash; &amp;mdash; “范型”与“技术”： 1. 范型与具体学科相关，对如何评估有很大影响：可用性测试是一种评估范型 2. 每种范型有特定的技术：可用性测试的技术有观察、问卷调查、访谈等 设计人员非正式地向&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Lec-3 交互设计原则与目标</title>
      <link>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-3-%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E7%9B%AE%E6%A0%87/</link>
      <pubDate>Mon, 25 Nov 2024 10:04:15 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-3-%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E7%9B%AE%E6%A0%87/</guid>
      <description>不知道为什么没有 Lec-2，往年这个标题是 Lec-2 来着，但是今年老师发的 PPT 直接跳过 2 了。具体什么情况无从知晓，因为上课根本没听嘛。 &amp;mdash; 交互框架是提供理解或定义某种事务的一种结&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Lec-1 人机交互概述</title>
      <link>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-1-%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 25 Nov 2024 09:46:53 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/lec-1-%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E6%A6%82%E8%BF%B0/</guid>
      <description>By ACM 孤立地从一个学科出发不可能设计出有效的交互式系统</description>
      
    </item>
    
    <item>
      <title>南京-幕府山-24-11</title>
      <link>https://huoxj.github.io/posts/%E6%B8%B8%E8%AE%B0/%E5%8D%97%E4%BA%AC-%E5%B9%95%E5%BA%9C%E5%B1%B1-24-11/</link>
      <pubDate>Thu, 21 Nov 2024 15:37:11 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%B8%B8%E8%AE%B0/%E5%8D%97%E4%BA%AC-%E5%B9%95%E5%BA%9C%E5%B1%B1-24-11/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>OO-继承与派生</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/oo-%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B4%BE%E7%94%9F/</link>
      <pubDate>Thu, 21 Nov 2024 12:36:40 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/oo-%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B4%BE%E7%94%9F/</guid>
      <description>考试必考。所以在网上找一些笔记，记下有价值的部分以供复习。 继承和派生这对名词基本是一个意思，只是各自用语习惯不一样： OO 是 Java 学的，所以我倾向于第一种表达。 C+神奇地提供了三种继承方式&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>OO 杂项</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/oo-%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Wed, 20 Nov 2024 10:34:25 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/oo-%E6%9D%82%E9%A1%B9/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>杂项</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Sun, 17 Nov 2024 20:12:19 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E6%9D%82%E9%A1%B9/</guid>
      <description>RAII： Resource acquisition is initialization 将资源管理交给其本身的思想。 尽量使用对象的生命周期来管理资源，初始化时调用构造函数进行资源分配，离开作用域时&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>可变参数</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</link>
      <pubDate>Fri, 15 Nov 2024 17:22:58 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</guid>
      <description>向函数传不定个数的参数就是可变参数。标识符为 &lt;code&gt;...&lt;/code&gt;。 举例： &lt;code&gt;c int printf(const char *format, ...); &lt;/code&gt; C 中使用可变参数需要引入头文件 `st&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>移动语义与右值引用</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link>
      <pubDate>Sun, 10 Nov 2024 15:55:56 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>读论文-YOLO v1</title>
      <link>https://huoxj.github.io/posts/%E8%8A%9D%E5%A3%AB%E6%94%B6%E5%AE%B9%E6%89%80/%E8%AF%BB%E8%AE%BA%E6%96%87-yolo-v1/</link>
      <pubDate>Fri, 08 Nov 2024 21:56:06 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%8A%9D%E5%A3%AB%E6%94%B6%E5%AE%B9%E6%89%80/%E8%AF%BB%E8%AE%BA%E6%96%87-yolo-v1/</guid>
      <description>大创要做一个基于两个特征矩阵的信号分割与分类（不知道该不该这么描述），精确度要求不高，但对实时性要求比较高。我想到了借鉴 YOLO 来解决这个问题，所以顺便就来读一下 YOLO 初代的论文，太复杂了猪&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Asst1</title>
      <link>https://huoxj.github.io/posts/cs149-%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/asst1/</link>
      <pubDate>Fri, 08 Nov 2024 09:40:53 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/cs149-%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/asst1/</guid>
      <description>使用 &lt;code&gt;std::thread&lt;/code&gt; 来绘制分形图像。 默认策略是将图像分成高度相同的几块，每一块分给一个线程画。 这样其实做不到负载均衡，因为每一块画的工作量是不同的。 特别是 view1，很明显发现画&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>小米路由器 4Av2 刷 Openwrt 并开启 NAT6</title>
      <link>https://huoxj.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%8A%98%E8%85%BE/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8-4av2-%E5%88%B7-openwrt-%E5%B9%B6%E5%BC%80%E5%90%AF-nat6/</link>
      <pubDate>Sun, 03 Nov 2024 23:09:37 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%8A%98%E8%85%BE/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8-4av2-%E5%88%B7-openwrt-%E5%B9%B6%E5%BC%80%E5%90%AF-nat6/</guid>
      <description>网络环境是&lt;code&gt;南京大学鼓楼校区校园网&lt;/code&gt;。仙林应该是差不多的。 设备是&lt;code&gt;小米路由器 4A v2&lt;/code&gt;。这个设备导致我装 Openwrt 的过程相当坎坷 TAT，再也不贪便宜买低端设备了。 Breed 是一种 &amp;hellip;</description>
      
    </item>
    
    <item>
      <title>K 邻近分类器</title>
      <link>https://huoxj.github.io/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/k-%E9%82%BB%E8%BF%91%E5%88%86%E7%B1%BB%E5%99%A8/</link>
      <pubDate>Fri, 25 Oct 2024 20:03:20 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/k-%E9%82%BB%E8%BF%91%E5%88%86%E7%B1%BB%E5%99%A8/</guid>
      <description>对测试样本，找训练样本中最近的 $k$ 个，这 $k$ 个样本中标签最多的就是测试样本的类。 k-NN 的 $k=1$ 的特殊情况。</description>
      
    </item>
    
    <item>
      <title>关键字</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Sun, 20 Oct 2024 23:29:02 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>字面意思，给类型取别名。 ```cpp int main() { typedef int size_t; size_t s = 3; fun(); } int fun() { size_t t = 2&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>类型解释</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E7%B1%BB%E5%9E%8B%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Sun, 13 Oct 2024 10:15:01 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E7%B1%BB%E5%9E%8B%E8%A7%A3%E9%87%8A/</guid>
      <description>写这部分是为了： 记住要： 推荐这个网站，能帮你把 C 类型声明翻译成自然语言： 本文中，我们只关心如下几种说明符，因为这几种说明符是最困难的部分： ```text 括号括住的部分 &amp;gt; 后缀说明符 &amp;gt;&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>String</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/string/</link>
      <pubDate>Sat, 12 Oct 2024 11:20:30 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/string/</guid>
      <description>在以前打竞赛的时候，基本都是用字符数组配合&lt;code&gt;string.h&lt;/code&gt;里的函数去处理字符串。现在开始系统地接触C++，所以来记录一下&lt;code&gt;string&lt;/code&gt;类的知识。 &lt;code&gt;string&lt;/code&gt; 是 C+格的字符串类，也是一种&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>指针、引用与数组</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E4%B8%8E%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 12 Oct 2024 10:43:45 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E4%B8%8E%E6%95%B0%E7%BB%84/</guid>
      <description>以我的粗浅且可能有很大错误的理解，引用就是有着一些限制、有一些封装的指针，这些限制在编译器层面解决，底层就是以指针形式实现。 限制在如下几点： 引用带来的方便： 指针是指向一块内存首地址的变量。指针的&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>STL</title>
      <link>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/stl/</link>
      <pubDate>Sat, 12 Oct 2024 10:43:24 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/c&#43;&#43;%E6%8B%BE%E9%81%97/stl/</guid>
      <description>STL 有五大组件： 序列容器实现能按顺序访问的数据结构。 有如下容器： 省略返回类型以及一些无关紧要的参数类型。 没有头部加入和删除元素。 insert，erase 和 clear 复杂度 $O(n&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>专题定位</title>
      <link>https://huoxj.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%93%E9%A2%98%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Tue, 08 Oct 2024 15:03:29 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%93%E9%A2%98%E5%AE%9A%E4%BD%8D/</guid>
      <description>本专题(算法与数据结构)主要用以复习与回忆，内容量少且相当不全面。 写这个专题的主要原因是刷力扣的时候唤起了曾经竞赛的回忆，借博客给这些陈旧的知识重新打包装好，顺便应对以后保研或者应聘的机试。当然，能&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>单调队列 &amp; 单调栈</title>
      <link>https://huoxj.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97--%E5%8D%95%E8%B0%83%E6%A0%88/</link>
      <pubDate>Mon, 07 Oct 2024 19:38:18 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97--%E5%8D%95%E8%B0%83%E6%A0%88/</guid>
      <description>单调队列：获得 区间(滑动窗口)的 最值 单调栈：获得 某元素 周围 第一个 大于或者小于它 的元素 实际运用多为以上两种情况，但仍需活学活用，不能被上面的两种情况限制。 之前在力扣评论区刷到过如下比&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>决策树</title>
      <link>https://huoxj.github.io/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%86%B3%E7%AD%96%E6%A0%91/</link>
      <pubDate>Mon, 30 Sep 2024 08:54:34 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%86%B3%E7%AD%96%E6%A0%91/</guid>
      <description>决策树就是一颗 &lt;code&gt;if-else&lt;/code&gt; 树。树的每一个结点代表一个决策（测试），同时也代表了这个决策所对应的一个样本空间。我们的目标就是通过多次产生 &lt;code&gt;if-else&lt;/code&gt; 分支，尽可能地让决策树的叶子结点只&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>博客初步搭建道路</title>
      <link>https://huoxj.github.io/posts/%E5%BB%BA%E8%AE%BE%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%BE%81%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E9%81%93%E8%B7%AF/</link>
      <pubDate>Sat, 28 Sep 2024 10:21:59 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E5%BB%BA%E8%AE%BE%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%BE%81%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E9%81%93%E8%B7%AF/</guid>
      <description>写博客这件事，从初三开始打竞赛就已经提上日程了。当时很草率地创建了一个洛谷博客，然后一篇文章都没有www。后来又存在各种阻力，例如高中的学业压力、只有周末接触电子设备的机会。但对博客与日俱增的需求的动&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>使用VMware给物理硬盘装系统</title>
      <link>https://huoxj.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%8A%98%E8%85%BE/%E4%BD%BF%E7%94%A8vmware%E7%BB%99%E7%89%A9%E7%90%86%E7%A1%AC%E7%9B%98%E8%A3%85%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 27 Sep 2024 17:06:04 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%8A%98%E8%85%BE/%E4%BD%BF%E7%94%A8vmware%E7%BB%99%E7%89%A9%E7%90%86%E7%A1%AC%E7%9B%98%E8%A3%85%E7%B3%BB%E7%BB%9F/</guid>
      <description>由于手贱不小心删了Ubuntu自带的Python，服务器上的Ubuntu Server炸了。。。只能重新装一遍系统。但是我懒得做启动U盘了，所以索性直接在VMware里把系统给装起来。 只需要先下好你&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Linux根目录扩容</title>
      <link>https://huoxj.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%8A%98%E8%85%BE/linux%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9/</link>
      <pubDate>Fri, 06 Sep 2024 11:16:41 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%8A%98%E8%85%BE/linux%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9/</guid>
      <description>有时间补一下我是怎么操作的。</description>
      
    </item>
    
    <item>
      <title>实模式到保护模式</title>
      <link>https://huoxj.github.io/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 04 Sep 2024 10:53:08 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>实模式到保护模式这个过程已经接触过很多次了。最早从软院OS实验的例行检查里背过相关内容，然后便不无意外地忘掉了。这次在OSDI课上又涉及到了这部分内容，趁此机会重温一下并写一个通俗易懂的笔记，以便以后&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>NPS折腾记录</title>
      <link>https://huoxj.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%8A%98%E8%85%BE/nps%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 01 Sep 2024 15:52:50 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%8A%98%E8%85%BE/nps%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</guid>
      <description>在宿舍里搞了一台ubuntu server折腾用。想在校园网的特殊环境下实现外网访问内网的需求，从而能随时使用个人博客与code server等服务。 以下为我在大二开学诞生这个需求，直到大三开学才基&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>概要</title>
      <link>https://huoxj.github.io/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A6%82%E8%A6%81/</link>
      <pubDate>Fri, 16 Aug 2024 16:39:18 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A6%82%E8%A6%81/</guid>
      <description>精度矩阵是二分类下的混淆矩阵 &lt;code&gt;TRUE&lt;/code&gt;/&lt;code&gt;FALSE&lt;/code&gt;: 预测结果与实际相符/不符 &lt;code&gt;POSITIVE&lt;/code&gt;/&lt;code&gt;NEGATIVE&lt;/code&gt;: 预测为真(阳性)/假(阴性) 对于两个样本 $xjin R^d$</description>
      
    </item>
    
    <item>
      <title>随记</title>
      <link>https://huoxj.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0/</link>
      <pubDate>Wed, 14 Aug 2024 10:49:05 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0/</guid>
      <description>@Test注解一定要是&lt;code&gt;import org.junit.Test&lt;/code&gt;！如果是&lt;code&gt;org.junit.jupiter.api.Test&lt;/code&gt;会导致Mock的对象全部为&lt;code&gt;null&lt;/code&gt;</description>
      
    </item>
    
    <item>
      <title>毛概</title>
      <link>https://huoxj.github.io/posts/%E6%AF%9B%E6%A6%82/%E6%AF%9B%E6%A6%82/</link>
      <pubDate>Sun, 23 Jun 2024 13:44:55 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%AF%9B%E6%A6%82/%E6%AF%9B%E6%A6%82/</guid>
      <description>马克思主义中国化时代化，就是 1. 立足中国国情和时代特点，坚持把马克思主义基本原理同中国具体实际相结合、同中华优秀传统文化相结合，深入研究和解决中国不同历史时期的实际问题，真正搞懂面临的时代课题，不&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Ex6 信号量与PV操作习题</title>
      <link>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ex6-%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B8%8Epv%E6%93%8D%E4%BD%9C%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Fri, 24 May 2024 09:53:23 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ex6-%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B8%8Epv%E6%93%8D%E4%BD%9C%E4%B9%A0%E9%A2%98/</guid>
      <description>rmutex的理解 : waiting customers</description>
      
    </item>
    
    <item>
      <title>Lab3</title>
      <link>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/</link>
      <pubDate>Wed, 22 May 2024 08:20:13 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/</guid>
      <description>中断向量是确定中断服务程序的位置。包含段基址和偏移量。 把每个中断服务程序进行编号，一个号代表一个中断服务程序，就是中断类型码，是计算机用来查找中断向量用的。(0-255) 一片专门用来存放所有的中断&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>推荐算法初探</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E5%B7%A5ii%E5%A4%A7%E4%BD%9C%E4%B8%9A-%E8%93%9D%E9%B2%B8%E5%95%86%E5%9F%8E/%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Tue, 21 May 2024 22:41:47 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E5%B7%A5ii%E5%A4%A7%E4%BD%9C%E4%B8%9A-%E8%93%9D%E9%B2%B8%E5%95%86%E5%9F%8E/%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2/</guid>
      <description>蓝鲸网购商城，这个问题域下涉及的对象只有和。这两个对象和推荐算法相关的属性有如下： 没怎么细看，我姑且认为这个更加准确吧</description>
      
    </item>
    
    <item>
      <title>C5 文件管理</title>
      <link>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c5-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 16 May 2024 20:45:32 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c5-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
      <description>卷：介质的物理单位 块：主存储器和辅助存储器进行信息交换的物理单位，也叫 文件中的数据是一串没有结构的字符流，比如一串字符串组成的文件 若干逻辑记录信息所组成的记录流文件。是逻辑上的一坨信息的单位 这&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>课堂知识点索引</title>
      <link>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E8%AF%BE%E5%A0%82%E7%9F%A5%E8%AF%86%E7%82%B9%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sat, 11 May 2024 15:06:51 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E8%AF%BE%E5%A0%82%E7%9F%A5%E8%AF%86%E7%82%B9%E7%B4%A2%E5%BC%95/</guid>
      <description>本文档只包含一些关键的知识点 对应Lecture-3 为什么叫子集构造法: 总结: 根据控制流的来源决定返回值 ``` %3 = phi i32 [1, %1], [2, %2] // 如果从%1控制&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Jenkins部署Maven项目到Docker</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E5%B7%A5ii%E5%A4%A7%E4%BD%9C%E4%B8%9A-%E8%93%9D%E9%B2%B8%E5%95%86%E5%9F%8E/jenkins%E9%83%A8%E7%BD%B2maven%E9%A1%B9%E7%9B%AE%E5%88%B0docker/</link>
      <pubDate>Fri, 10 May 2024 10:08:55 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E5%B7%A5ii%E5%A4%A7%E4%BD%9C%E4%B8%9A-%E8%93%9D%E9%B2%B8%E5%95%86%E5%9F%8E/jenkins%E9%83%A8%E7%BD%B2maven%E9%A1%B9%E7%9B%AE%E5%88%B0docker/</guid>
      <description>这步比较简单，网上教程也很多，故省略 执行拉取镜像的命令 &lt;code&gt;bash docker pull jenkins/jenkins:lts &lt;/code&gt; 查看当前的镜像，可以发现jenkins已经在列表里了 &amp;hellip;</description>
      
    </item>
    
    <item>
      <title>随记</title>
      <link>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%9A%8F%E8%AE%B0/</link>
      <pubDate>Thu, 09 May 2024 22:03:20 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%9A%8F%E8%AE%B0/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>问题收集</title>
      <link>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</link>
      <pubDate>Wed, 08 May 2024 20:49:02 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>知识点随记</title>
      <link>https://huoxj.github.io/posts/%E8%BD%AF%E5%B7%A5ii%E5%A4%A7%E4%BD%9C%E4%B8%9A-%E8%93%9D%E9%B2%B8%E5%95%86%E5%9F%8E/%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9A%8F%E8%AE%B0/</link>
      <pubDate>Wed, 08 May 2024 09:23:47 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E8%BD%AF%E5%B7%A5ii%E5%A4%A7%E4%BD%9C%E4%B8%9A-%E8%93%9D%E9%B2%B8%E5%95%86%E5%9F%8E/%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9A%8F%E8%AE%B0/</guid>
      <description>&lt;code&gt;java public interface ItemRepository extends JpaRepository, JpaSpecificationExecutor{} &lt;/code&gt; ```jav&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>C4 设备管理</title>
      <link>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c4-%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 07 May 2024 20:09:42 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c4-%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;解决设备和CPU的不匹配，使两者充分工作 2. 设备的具体操作细节，配置驱动程序，提供 ：改善设备效率，尤其是磁盘 ：用统一标准来管理所有设备 从低到高为 位于OS底层，和设备联系紧密 数据传输&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>C3 存储管理</title>
      <link>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c3-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 25 Apr 2024 09:54:02 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c3-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</guid>
      <description>| 0 | 4k | 12k | 28k | 44k | 92k | &amp;hellip; | | &amp;mdash;&amp;mdash;- | OS区(4k) | 分区1(8k) | 分区2(16k) | 分区3(16k) | 分区4(2&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>C3-SQL</title>
      <link>https://huoxj.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/c3-sql/</link>
      <pubDate>Mon, 22 Apr 2024 19:18:04 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/c3-sql/</guid>
      <description>&lt;code&gt;CREATE SCHEMA AUTHORIZATION &lt;/code&gt; &lt;code&gt;DROP SCHEMA &lt;/code&gt; &lt;code&gt;sql CREATE TABLE ( [] [,同上] [,]) &lt;/code&gt; ```sql e.g. CR&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>C2 处理器管理</title>
      <link>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c2-%E5%A4%84%E7%90%86%E5%99%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 22 Apr 2024 14:50:20 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c2-%E5%A4%84%E7%90%86%E5%99%A8%E7%AE%A1%E7%90%86/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>C1 计算机操作系统概述</title>
      <link>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 22 Apr 2024 14:17:37 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>C0 绪论</title>
      <link>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c0-%E7%BB%AA%E8%AE%BA/</link>
      <pubDate>Mon, 22 Apr 2024 14:07:17 -0800</pubDate>
      <author>huoxj_runz@gmail.com (Runz Liu)</author>
      <guid>https://huoxj.github.io/posts/se%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c0-%E7%BB%AA%E8%AE%BA/</guid>
      <description></description>
      
    </item>
    
  </channel>
</rss>
