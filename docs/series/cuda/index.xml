<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CUDA on Runz&#39;s Blog</title>
    <link>https://huoxj.github.io/series/cuda/</link>
    <description>Recent content in CUDA on Runz&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Thu, 13 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://huoxj.github.io/series/cuda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clangd 无法识别 CMake 生成的 CUDA --options-file 标识</title>
      <link>https://huoxj.github.io/posts/cuda/clangd-%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB-cmake-%E7%94%9F%E6%88%90%E7%9A%84-cuda---options-file-%E6%A0%87%E8%AF%86/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://huoxj.github.io/posts/cuda/clangd-%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB-cmake-%E7%94%9F%E6%88%90%E7%9A%84-cuda---options-file-%E6%A0%87%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;tl.dr&lt;/h1&gt;&#xA;&lt;p&gt;CMake 生成的 compile_commands.json 中，对 .cu 文件会生成 &amp;ndash;options-file 的标识，而 clangd 无法识别，从而导致 clangd 报错无法找到头文件。&lt;/p&gt;&#xA;&lt;p&gt;解决：在 CMake 中关闭为 cuda 生成 &amp;ndash;options-file 的选项&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# This would work&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;CMAKE_CUDA_USE_RESPONSE_FILE_FOR_INCLUDES&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# You can add below if you like&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;CMAKE_CUDA_USE_RESPONSE_FILE_FOR_LIBRARIES&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;CMAKE_CUDA_USE_RESPONSE_FILE_FOR_OBJECTS&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者用其他能正确生成 compile_commands.json 的工具。比如 bear 或者 xmake。&lt;/p&gt;&#xA;&lt;h1 id=&#34;原因&#34;&gt;原因&lt;/h1&gt;&#xA;&lt;p&gt;使用 CMake(3.25.2) 构建工程，某些 .cu 文件里需要 include header目录下的头文件。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;include_directories&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成的 nvcc 编译命令&lt;strong&gt;理应&lt;/strong&gt;长这样：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvcc *.cu -I/.../header ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，CMake 实际生成了：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvcc *.cu --options-file .../includes_CUDA.rsp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找到 &lt;code&gt;includes_CUDA.rsp&lt;/code&gt;，里面存放了 -I 的 flags。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-includes_CUDA.rsp&#34; data-lang=&#34;includes_CUDA.rsp&#34;&gt;-I/.../header&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而这个 &lt;code&gt;--options-file&lt;/code&gt; 选项是 nvcc 独有的，并且 clangd(18.1.3) 似乎无法识别。导致 .cu 在 IDE 中无法识别头文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CUDA warp divergence 的小思考</title>
      <link>https://huoxj.github.io/posts/cuda/cuda-warp-divergence-%E7%9A%84%E5%B0%8F%E6%80%9D%E8%80%83/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://huoxj.github.io/posts/cuda/cuda-warp-divergence-%E7%9A%84%E5%B0%8F%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;CUDA 的执行是以 warp 为单位的，一个 warp 内的线程的运行像是一排阵列士兵一样齐刷刷地踢正步。warp 扮演的角色就是给这一排士兵下指令的军官。&lt;/p&gt;&#xA;&lt;p&gt;但是总有例外。比如遇到了线程 id 相关的 if-else，一部分线程走 a 分支，另一部分线程走 b 分支，这就会造成 warp divergence。军官在单位时间内只能下一条指令。为了让士兵完成各自的命令，一个解决方法是：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;军官下令只让分支 a 的士兵听指令，分支 b 的士兵原地待命。（active mask）&lt;/li&gt;&#xA;&lt;li&gt;军官正常下分支 a 中的命令&lt;/li&gt;&#xA;&lt;li&gt;分支 a 命令结束。下令 a 的士兵待命，b 的士兵听令。&lt;/li&gt;&#xA;&lt;li&gt;军官正常下分支 b 中的命令&lt;/li&gt;&#xA;&lt;li&gt;两分支汇合，过程结束&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这个方法的弊端是将两个分支的执行串行化了，非 active 的线程没有完全利用，浪费了性能。&lt;/p&gt;&#xA;&lt;p&gt;CUDA 早期（pre volta）的 warp divergence 大致是以这样的思路解决的。不过即使是现在的 CUDA，对于这种 divergence 还是会造成一定程度的性能浪费。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CUDA 原子操作</title>
      <link>https://huoxj.github.io/posts/cuda/cuda-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://huoxj.github.io/posts/cuda/cuda-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;CUDA 原子操作和 C++ 的原子操作概念基本是一样的。&lt;/p&gt;&#xA;&lt;p&gt;给出定义：An atomic function performs a read-modify-write atomic operation on one 32-bit, 64-bit, or 128-bit word residing in global or shared memory.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;128 bit 的支持似乎是新版本加的，网上部分资料还仅限于 32 和 64 bit&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;本文记录一些特殊点和坑点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;&#xA;&lt;p&gt;CUDA 原子操作被包装成了函数。&lt;/p&gt;&#xA;&lt;p&gt;比如原子加法 &lt;code&gt;atomicAdd(int* addr, int val)&lt;/code&gt;。向 addr 地址加上 val。&lt;/p&gt;&#xA;&lt;p&gt;对于操作的对象，如定义所言，只支持 32, 64, 128 bit 的类型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;返回旧值&#34;&gt;返回旧值&lt;/h2&gt;&#xA;&lt;p&gt;原子函数的返回值是参数地址被修改前的值。&lt;/p&gt;&#xA;&lt;p&gt;利用这一点，可以实现 filter。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__global__ &lt;span style=&#34;color:#81a1c1&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;myCudaFilter&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;dest&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; len&lt;span style=&#34;color:#eceff4&#34;&gt;){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; idx &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;...;&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// linear index of current thread&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&#x9;__shared__ &lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// filter element that greater than 114&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;114&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// loc is the value before increment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#81a1c1&#34;&gt;int&lt;/span&gt; loc &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; atomicAdd&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt;sum&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;dest&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;loc&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现任意原子操作&#34;&gt;实现任意原子操作&lt;/h2&gt;&#xA;&lt;h3 id=&#34;atomiccas&#34;&gt;atomicCAS&lt;/h3&gt;&#xA;&lt;p&gt;先介绍 atomicCAS。全称：atomic Compare And Swap&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thrust 库的使用与踩坑</title>
      <link>https://huoxj.github.io/posts/cuda/thrust-%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://huoxj.github.io/posts/cuda/thrust-%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%B8%A9%E5%9D%91/</guid>
      <description>&lt;p&gt;待研究。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
