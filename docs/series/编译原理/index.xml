<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编译原理 on Runz&#39;s Blog</title>
    <link>https://huoxj.github.io/series/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
    <description>Recent content in 编译原理 on Runz&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Sat, 11 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://huoxj.github.io/series/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>课堂知识点索引</title>
      <link>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E8%AF%BE%E5%A0%82%E7%9F%A5%E8%AF%86%E7%82%B9%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate>
      <guid>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E8%AF%BE%E5%A0%82%E7%9F%A5%E8%AF%86%E7%82%B9%E7%B4%A2%E5%BC%95/</guid>
      <description>&lt;h1 id=&#34;编译原理知识点索引&#34;&gt;编译原理知识点索引&lt;/h1&gt;&#xA;&lt;h2 id=&#34;声明&#34;&gt;声明&lt;/h2&gt;&#xA;&lt;p&gt;本文档只包含一些关键的知识点&lt;/p&gt;&#xA;&lt;h2 id=&#34;词法分析-正则表达式和自动机理论&#34;&gt;词法分析-正则表达式和自动机理论&lt;/h2&gt;&#xA;&lt;p&gt;对应Lecture-3&lt;/p&gt;&#xA;&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;&#xA;&lt;h4 id=&#34;字母表&#34;&gt;字母表&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;$$字母表\Sigma是一个有限的符号集合$$&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;串&#34;&gt;串&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;$$字母表\Sigma上的串s是由\Sigma中符号构成的一个有穷序列$$&lt;/p&gt;&#xA;&lt;p&gt;$空串:\epsilon$&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;语言&#34;&gt;语言&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;$语言是给定字母表\Sigma上一个任意的可数的串的集合$&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;正则表达式&#34;&gt;正则表达式&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;$给定字母表\Sigma, \Sigma上的正则表达式由且仅由以下规则定义:$&lt;/p&gt;&#xA;&lt;p&gt;(1) $\epsilon是正则表达式$&lt;/p&gt;&#xA;&lt;p&gt;(2) $\forall a\in\Sigma, a是正则表达式$&lt;/p&gt;&#xA;&lt;p&gt;(3) $如果r是正则表达式, 则(r)是正则表达式$&lt;/p&gt;&#xA;&lt;p&gt;(4) $如果r, s都是正则表达式, 则 r|s, rs, r^*也是正则表达式$&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;nfanondeterministic-finite-automaton&#34;&gt;NFA(Nondeterministic Finite Automaton)&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;$非确定性有穷自动机\mathcal{A}是一个五元组\mathcal{A}=(\Sigma,S,s_0,\delta,F)$&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;见课件-3-26&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;dfadeterministic-finite-automaton&#34;&gt;DFA(Deterministic Finite Automaton)&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;见课件-3-34&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;re-nfa-dfa等价转化&#34;&gt;RE, NFA, DFA等价转化&lt;/h3&gt;&#xA;&lt;h4 id=&#34;re-nfa---thompson构造法&#34;&gt;RE-&amp;gt;NFA - Thompson构造法&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;见课件-3-40:45&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;nfa-dfa---子集构造法&#34;&gt;NFA-&amp;gt;DFA - 子集构造法&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原理见课件-3-54&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;为什么叫子集构造法:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构造出的DFA的每一个状态$s_D\in S_D$, 对应原来NFA的状态的一个子集$s_D\subseteq 2^{S_N}$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;总结:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对NFA的每个状态求其对应**$\epsilon$闭包**, 即只通过$\epsilon$转移可达的状态集合. 这个集合中的状态可以被视作DFA中的&lt;strong&gt;一个&lt;/strong&gt;状态&lt;/li&gt;&#xA;&lt;li&gt;新的DFA中的状态的&lt;strong&gt;转移函数&lt;/strong&gt;是其对应NFA状态集合中每个状态的转移函数构成的. 这一条课件讲的更清楚&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;dfa-dfa---dfa最小化&#34;&gt;DFA-&amp;gt;DFA - DFA最小化&lt;/h4&gt;&#xA;&lt;h2 id=&#34;ir-llvm&#34;&gt;IR-LLVM&lt;/h2&gt;&#xA;&lt;h4 id=&#34;llvm&#34;&gt;LLVM&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Low Level Virtual Machine&lt;/p&gt;</description>
    </item>
    <item>
      <title>随记</title>
      <link>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%9A%8F%E8%AE%B0/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate>
      <guid>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%9A%8F%E8%AE%B0/</guid>
      <description>&lt;h1 id=&#34;随记&#34;&gt;随记&lt;/h1&gt;&#xA;&lt;h2 id=&#34;pumping-theorem的理解&#34;&gt;Pumping Theorem的理解&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runzblog.oss-cn-hangzhou.aliyuncs.com/postimg/202409271714016.png&#34; alt=&#34;image-20240509220414719&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;一个&lt;strong&gt;足够长&lt;/strong&gt;的，能被正则表达式$r$接受的&lt;strong&gt;字符串&lt;/strong&gt;，一定能分成$xyz$三个部分。因为$r$对应DFA的状态数$p$是有限的，而串的长度大于$p$时，一定有&lt;strong&gt;一个&lt;/strong&gt;状态被经历了&lt;strong&gt;两次及以上&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;其中$y$对应$r$的DFA中起始状态和结束状态是同一个状态&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;由于是同一个状态，我就可以接受任意多个$y$，所以$xy^iz\in L$肯定成立&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;扩展：上下文无关法的Pumping Theorem，具体可见课件里面&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>问题收集</title>
      <link>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate>
      <guid>https://huoxj.github.io/posts/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;h1 id=&#34;待解决问题&#34;&gt;待解决问题&lt;/h1&gt;&#xA;&lt;h2 id=&#34;lexer&#34;&gt;Lexer&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;DFA最小化为什么是正确的&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;DFA最小化的结果唯一吗&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;有关自动机的书：《计算理论导引》、J.E.H R.M J.D.U《Automata Theory, Languages, and Computation 第三版》&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
